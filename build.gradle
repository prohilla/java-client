apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'signing'
apply plugin: 'maven-publish'

import org.apache.tools.ant.filters.*

group 'io.appium'
version '6.1.0'

repositories {
    jcenter()
    mavenCentral()
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'org.owasp:dependency-check-gradle:1.4.0'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
    }
}

apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    ecj
}

dependencies {
    ecj 'org.eclipse.jdt.core.compiler:ecj:4.6.1'
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    def ecjJar = configurations.ecj.singleFile

    options.fork = true
    options.fork executable: 'java', jvmArgs: [ '-cp', ecjJar.path, 'org.eclipse.jdt.internal.compiler.batch.Main' ]
    options.define compilerArgs: [
            '-encoding', 'utf-8'
    ]
}

dependencies {
    compile ("org.seleniumhq.selenium:selenium-java:${project.property('selenium.version')}") {
        force = true

        exclude group: 'com.google.code.gson'
        exclude module: 'htmlunit-driver'
        exclude group: 'net.sourceforge.htmlunit'

    }
    compile ("org.seleniumhq.selenium:selenium-support:${project.property('selenium.version')}") {
        force = true
    }
    compile ("org.seleniumhq.selenium:selenium-api:${project.property('selenium.version')}") {
        force = true
    }
    compile 'com.google.code.gson:gson:2.8.4'
    compile 'org.apache.httpcomponents:httpclient:4.5.5'
    compile 'cglib:cglib:3.2.6'
    compile 'commons-validator:commons-validator:1.6'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'commons-io:commons-io:2.6'
    compile 'org.springframework:spring-context:5.0.5.RELEASE'
    compile 'org.aspectj:aspectjweaver:1.9.1'

    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile (group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '2.2.1') {
        exclude group: 'org.seleniumhq.selenium'
    }
}

ext {
    Sources = fileTree("$buildDir/src/main/java").include('**/*.java')
    Tests = fileTree("$buildDir/src/test/java").include('**/*.java')
    Docs = file("$buildDir/doc")
}

dependencyCheck {
    failBuildOnCVSS=22
}

jacoco {
    toolVersion = '0.8.1'
}

tasks.withType(JacocoReport) {
    description = 'Generate Jacoco coverage reports after running tests'
    sourceSets sourceSets.main
    reports {
        html.enabled true
        html.destination file("${buildDir}/Reports/jacoco")
    }
}
jacocoTestReport.dependsOn test

checkstyle {
    toolVersion = '8.7'
    configFile = file("$projectDir/google-style.xml")
    showViolations = true
    ignoreFailures = false
}
checkstyleMain.excludes = ['**/org/openqa/selenium/**']

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

wrapper {
    gradleVersion = '4.8.1'
    distributionType = Wrapper.DistributionType.ALL
}

processResources {
    filter ReplaceTokens, tokens: [
            'selenium.version': project.property('selenium.version')
    ]
}

task xcuiTest( type: Test ) {
    useJUnit()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    filter {
        includeTestsMatching '*.appium.element.generation.ios.*'
        includeTestsMatching '*.appium.AppiumFluentWaitTest'
        includeTestsMatching 'io.appium.java_client.ios.*'
        includeTestsMatching '*.pagefactory_tests.XCUITModeTest'
        includeTestsMatching '*.pagefactory_tests.widget.tests.combined.*'
        includeTestsMatching '*.pagefactory_tests.widget.tests.ios.*'
        includeTestsMatching '*.StartingAppLocallyTest.startingIOSAppWithCapabilitiesAndServiceTest'
        includeTestsMatching '*.StartingAppLocallyTest.startingIOSAppWithCapabilitiesAndFlagsOnServerSideTest'
        exclude '**/UIAutomationTest.class'
        exclude '**/IOSScreenRecordTest.class'
        exclude '**/ImagesComparisonTest.class'
    }
}

task uiAutomationTest( type: Test ) {
    useJUnit()
    testLogging.showStandardStreams = true
    testLogging.exceptionFormat = 'full'
    include '**/UIAutomationTest.class'
}
